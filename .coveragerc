# .coveragerc
# Configuration for coverage.py, used by tools like pytest-cov.
# This file is placed in the root of the monorepo.

[run]
# branch = True  # Uncomment to enable branch coverage analysis.

# --- Source Configuration ---
# Tell coverage which code to measure. This is crucial for a monorepo.
# We list the actual packages inside the 'src' directories.
source =
    paper_asset_pricing
    paper_data
    paper_model
    paper_portfolio

# --- Omit Configuration ---
# Tell coverage which files to NEVER measure, even if they are imported.
omit =
    # Never measure coverage of the test files themselves
    */tests/*

    # Exclude all example projects and scripts
    examples/*

    # Exclude build artifacts
    dist/*

    # Exclude virtual environment directories
    .tox/*
    .venv/*
    venv/*

    # Exclude the CLI entry point, which is hard to test directly
    # and is usually just a call to another function.
    paper_asset_pricing/src/paper_asset_pricing/__main__.py


[report]
# --- Line Exclusion Configuration ---
# A list of regular expressions. Any line matching one of these will be
# excluded from the coverage report and not count as a miss.
exclude_lines =
    # The standard pragma for explicitly ignoring a line
    pragma: no cover

    # --- THIS IS THE RULE FOR PRIVATE METHODS ---
    # Exclude the function/method definition of any private or "protected" method.
    # Matches `def _method(...):` and `def __method(...):`
    ^\s*def\s+_(.*)\(.*\):\s*$

    # Don't complain about abstract methods that haven't been implemented
    raise NotImplementedError
    @(abc\.)?abstractmethod

    # Don't complain about code that's only meant to be run as a script
    if __name__ == .__main__.:

    # Don't complain about boilerplate for type checking
    if (typing\.)?TYPE_CHECKING:

    # Don't complain about simple "pass" statements
    ^\s*pass\s*$

    # Don't complain about docstrings or other string-only lines
    ^\s*""".*"""\s*$
    ^\s*'''.*'''\s*$


# --- Reporting Options ---
# If you want to enforce a coverage minimum in your CI, uncomment this.
# The command will fail if the total coverage is below this number.
fail_under = 70

# In the text report, show the line numbers of missing statements
show_missing = True

# Sort the report by the number of missing lines
sort = Miss


[html]
# Configuration for the HTML report (generated by `coverage html`)
directory = htmlcov


[xml]
# Configuration for the XML report (generated by `coverage xml`)
# This is the file that Codecov uses.
output = coverage.xml
